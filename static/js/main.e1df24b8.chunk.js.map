{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["INFO","react_default","a","createElement","className","FORM","props","onSubmit","weatherMethod","type","name","placeholder","WEATHER","city","Fragment","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","event","API_URL","DATA","sunsetInSec","date","timeSunset","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","Date","toLocaleTimeString","_this","setState","main","stop","info","components_form","this","weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1df24b8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst INFO = () => (\r\n\t\t<div className=\"info\">\r\n\t\t\t<h1 className=\"info__title\">Погодное приложение</h1>\r\n\t\t\t<p className=\"info__text\">Узнайте погоду в Вашем городе!</p>\r\n\t\t</div>\r\n\t);\r\n\r\nexport default INFO;","import React from \"react\";\r\n\r\nconst FORM = props => (\r\n\t\t<form className=\"form\" onSubmit = {props.weatherMethod}>\r\n\t\t\t<input className=\"form__city\" type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n\t\t\t<button className=\"form__btn\">Получить погоду</button>\r\n\t\t</form>\r\n\t);\r\n\r\nexport default FORM;","import React from \"react\";\r\n\r\nconst WEATHER = props => (\r\n\t\t<div className=\"weather\">\r\n\t\t\t{ props.city && \r\n\t\t\t\t<>\r\n\t\t\t\t\t<h2 className=\"weather__el\">Местоположение: { props.city }, { props.country }</h2>\r\n\t\t\t\t\t<h2 className=\"weather__el\">Температура: { props.temp }</h2>\r\n\t\t\t\t\t<h2 className=\"weather__el\">Давление: { props.pressure }</h2>\r\n\t\t\t\t\t<h2 className=\"weather__el\">Заход солнца: { props.sunset }</h2>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\r\n\t\t\t<h2>{ props.error }</h2>\r\n\r\n\t\t</div>\t\r\n\t)\r\n\r\nexport default WEATHER;","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = '08534a2ad9f3096671086d85d529fe39';\r\n\r\nclass App extends React.Component {\r\n\r\n\tstate = {\r\n\t\ttemp: undefined,\r\n\t\tcity: undefined,\r\n\t\tcountry: undefined,\r\n\t\tpressure: undefined,\r\n\t\tsunset: undefined,\r\n\t\terror: undefined\r\n\t}\r\n\r\n\tgettingWeather = async (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tvar city = event.target.elements.city.value;\r\n\t\tif (city) {\r\n\t\t\tconst API_URL = await fetch(`http://api.openweathermap.org\r\n\t\t\t\t/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n\t\t\tconst DATA = await API_URL.json();\r\n\r\n\t\t\tlet sunsetInSec = DATA.sys.sunset\r\n        \tlet date = new Date(sunsetInSec * 1000)\r\n        \tlet timeSunset = date.toLocaleTimeString()﻿\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\ttemp: DATA.main.temp,\r\n\t\t\t\tcity: DATA.name,\r\n\t\t\t\tcountry: DATA.sys.country,\r\n\t\t\t\tpressure: DATA.main.pressure,\r\n\t\t\t\tsunset: timeSunset,\r\n\t\t\t\terror: undefined\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttemp: undefined,\r\n\t\t\t\tcity: undefined,\r\n\t\t\t\tcountry: undefined,\r\n\t\t\t\tpressure: undefined,\r\n\t\t\t\tsunset: undefined,\r\n\t\t\t\terror: 'Введите название города!'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t<div className=\"wrapper__main\">\r\n\t\t\t\t\t<Info/>\r\n\t\t\t\t\t<div className=\"main__UI\">\r\n\t\t\t\t\t\t<Form weatherMethod = {this.gettingWeather} />\r\n\t\t\t\t\t\t<Weather \r\n\t\t\t\t\t\t\ttemp = {this.state.temp}\r\n\t\t\t\t\t\t\tcity = {this.state.city}\r\n\t\t\t\t\t\t\tcountry = {this.state.country}\r\n\t\t\t\t\t\t\tpressure = {this.state.pressure}\r\n\t\t\t\t\t\t\tsunset = {this.state.sunset}\r\n\t\t\t\t\t\t\terror = {this.state.error}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}